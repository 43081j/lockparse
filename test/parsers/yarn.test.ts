import {describe, test, expect} from 'vitest';
import {parse} from '../../src/main.js';
import path from 'node:path';
import {fileURLToPath} from 'node:url';
import {readFile} from 'node:fs/promises';

const fixtureDir = path.resolve(
  path.dirname(fileURLToPath(import.meta.url)),
  '../fixtures'
);

describe('yarn parser', () => {
  test('parse simple yarn lock file', async () => {
    const input = `
# This file is generated by running "yarn install" inside your project.
# Manual changes might be lost - proceed with caution!

__metadata:
  version: 8
  cacheKey: 10

"some-package@npm:^1.0.0":
  version: 1.2.3
  resolution: some-package@npm:1.2.3
  dependencies:
    another-package: npm:^2.0.0

"another-package@npm:^2.0.0":
  version: 2.3.4
  resolution: another-package@npm:2.3.4
`;
    const parsed = await parse(input, 'yarn');
    expect(parsed).toMatchSnapshot();
  });

  test('populates root from package.json', async () => {
    const input = `
"some-package@npm:^1.0.0":
  version: 1.2.3
  resolution: some-package@npm:1.2.3
  dependencies:
    another-package: npm:^2.0.0

"another-package@npm:^2.0.0":
  version: 2.3.4
  resolution: another-package@npm:2.3.4
`;
    const packageJson = {
      name: 'my-project',
      version: '1.0.0',
      dependencies: {
        'some-package': '^1.0.0'
      }
    };
    const parsed = await parse(input, 'yarn', packageJson);
    expect(parsed).toMatchSnapshot();
  });

  test('parses a complex yarn lock file', async () => {
    const input = await readFile(path.join(fixtureDir, 'yarn.lock'), 'utf-8');
    const parsed = await parse(input, 'yarn');
    expect(parsed).toMatchSnapshot();
  });

  test('parses a complex yarn v1 lock file', async () => {
    const input = await readFile(
      path.join(fixtureDir, 'yarn-v1.lock'),
      'utf-8'
    );
    const parsed = await parse(input, 'yarn');
    expect(parsed).toMatchSnapshot();
  });
});
